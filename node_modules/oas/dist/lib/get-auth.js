"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.getByScheme = void 0;
/**
 * @param user User to retrieve retrieve an auth key for.
 * @param scheme The type of security scheme that we want a key for.
 */
function getKey(user, scheme) {
    switch (scheme.type) {
        case 'oauth2':
        case 'apiKey':
            return user[scheme._key] || user.apiKey || scheme['x-default'] || null;
        case 'http':
            if (scheme.scheme === 'basic') {
                return user[scheme._key] || { user: user.user || null, pass: user.pass || null };
            }
            if (scheme.scheme === 'bearer') {
                return user[scheme._key] || user.apiKey || null;
            }
            return null;
        default:
            return null;
    }
}
/**
 * Retrieve auth keys for a specific security scheme for a given user for a specific "app" that
 * they have configured.
 *
 * For `scheme` we're typing it to a union of `SecurityScheme` and `any` because we have handling
 * and tests for an unknown or unrecognized `type` and though it's not possible with the
 * `SecurityScheme.type` to be unrecognized it may still be possible to get an unrecognized scheme
 * with this method in the wild as we have API definitions in our database that were ingested
 * before we had good validation in place.
 *
 * @param user User
 * @param scheme Security scheme to get auth keys for.
 * @param selectedApp The user app to retrieve an auth key for.
 */
function getByScheme(user, scheme, selectedApp) {
    if (scheme === void 0) { scheme = {}; }
    if ((user === null || user === void 0 ? void 0 : user.keys) && user.keys.length) {
        if (selectedApp) {
            return getKey(user.keys.find(function (key) { return key.name === selectedApp; }), scheme);
        }
        return getKey(user.keys[0], scheme);
    }
    return getKey(user, scheme);
}
exports.getByScheme = getByScheme;
/**
 * Retrieve auth keys for an API definition from a given user for a specific "app" that they have
 * configured.
 *
 * @param api API definition
 * @param user User
 * @param selectedApp The user app to retrieve an auth key for.
 */
function getAuth(api, user, selectedApp) {
    var _a;
    return Object.keys(((_a = api === null || api === void 0 ? void 0 : api.components) === null || _a === void 0 ? void 0 : _a.securitySchemes) || {})
        .map(function (scheme) {
        var _a;
        return _a = {},
            _a[scheme] = getByScheme(user, __assign(__assign({}, api.components.securitySchemes[scheme]), { _key: scheme }), selectedApp),
            _a;
    })
        .reduce(function (prev, next) { return Object.assign(prev, next); }, {});
}
exports["default"] = getAuth;
