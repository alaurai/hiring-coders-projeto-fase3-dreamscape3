"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var samples_1 = __importDefault(require("../samples"));
var matches_mimetype_1 = __importDefault(require("./matches-mimetype"));
/**
 * Extracts a collection of examples from an OpenAPI Media Type Object. The example will either
 * come from the `example` property, the first item in an `examples` array, or if none of those are
 * present it will generate an example based off its schema.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#mediaTypeObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#mediaTypeObject}
 * @param mediaType The media type that we're looking for examples for.
 * @param mediaTypeObject The media type object that we're looking for examples for.
 * @param opts Options
 * @param opts.includeReadOnly If you wish to include data that's flagged as `readOnly`.
 * @param opts.includeWriteOnly If you wish to include data that's flatted as `writeOnly`.
 */
function getMediaTypeExamples(mediaType, mediaTypeObject, opts) {
    if (opts === void 0) { opts = {}; }
    if (mediaTypeObject.example) {
        return [
            {
                value: mediaTypeObject.example
            },
        ];
    }
    else if (mediaTypeObject.examples) {
        var examples_1 = mediaTypeObject.examples;
        var multipleExamples = Object.keys(examples_1)
            .map(function (key) {
            var summary = key;
            var description;
            var example = examples_1[key];
            if (example !== null && typeof example === 'object') {
                if ('summary' in example) {
                    summary = example.summary;
                }
                if ('description' in example) {
                    description = example.description;
                }
                if ('value' in example) {
                    // If we have a $ref here then it's a circular reference and we should ignore it.
                    if (example.value !== null && typeof example.value === 'object' && '$ref' in example.value) {
                        return false;
                    }
                    example = example.value;
                }
            }
            var ret = { summary: summary, title: key, value: example };
            if (description) {
                ret.description = description;
            }
            return ret;
        })
            .filter(Boolean);
        // If we were able to grab examples from the `examples` property return them (`examples` can
        // sometimes be an empty object), otherwise we should try to generate some instead.
        if (multipleExamples.length) {
            return multipleExamples;
        }
    }
    if (mediaTypeObject.schema) {
        // We do not fully support XML so we shouldn't generate XML samples for XML schemas.
        if (!matches_mimetype_1["default"].xml(mediaType)) {
            return [
                {
                    value: (0, samples_1["default"])(JSON.parse(JSON.stringify(mediaTypeObject.schema)), opts)
                },
            ];
        }
    }
    return [];
}
exports["default"] = getMediaTypeExamples;
