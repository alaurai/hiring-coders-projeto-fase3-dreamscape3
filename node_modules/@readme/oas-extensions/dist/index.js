"use strict";
var _a;
exports.__esModule = true;
exports.validateExtension = exports.getExtension = exports.defaults = exports.SIMPLE_MODE = exports.SEND_DEFAULTS = exports.SAMPLES_LANGUAGES = exports.SAMPLES_ENABLED = exports.PROXY_ENABLED = exports.HEADERS = exports.EXPLORER_ENABLED = exports.CODE_SAMPLES = void 0;
exports.CODE_SAMPLES = 'code-samples';
exports.EXPLORER_ENABLED = 'explorer-enabled';
exports.HEADERS = 'headers';
exports.PROXY_ENABLED = 'proxy-enabled';
exports.SAMPLES_ENABLED = 'samples-enabled';
exports.SAMPLES_LANGUAGES = 'samples-languages';
exports.SEND_DEFAULTS = 'send-defaults';
exports.SIMPLE_MODE = 'simple-mode';
exports.defaults = (_a = {},
    _a[exports.CODE_SAMPLES] = undefined,
    _a[exports.EXPLORER_ENABLED] = true,
    _a[exports.HEADERS] = undefined,
    _a[exports.PROXY_ENABLED] = true,
    _a[exports.SAMPLES_ENABLED] = true,
    _a[exports.SAMPLES_LANGUAGES] = ['curl', 'node', 'ruby', 'php', 'python'],
    _a[exports.SEND_DEFAULTS] = false,
    _a[exports.SIMPLE_MODE] = true,
    _a);
/**
 * With one of our custom OpenAPI extensions, look for it in either an instance of `oas` or an instance of the
 * `Operation` class in `oas`.
 *
 * Our custom extensions can either be nestled inside of an `x-readme` object or at the root level with an `x-` prefix.
 *
 * @see {@link https://npm.im/oas}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#specificationExtensions}
 * @param extension Specification extension to lookup.
 * @param oas An instance of the `oas` library class.
 * @param operation An instsance of the `Operation` class from the `oas` library.
 * @returns Contents of the extension if found, otherwise the extensions default value.
 */
function getExtension(extension, oas, operation) {
    if (operation) {
        if (operation.hasExtension('x-readme')) {
            var data = operation.getExtension('x-readme');
            if (data && typeof data === 'object' && extension in data) {
                return data[extension];
            }
        }
        if (operation.hasExtension("x-".concat(extension))) {
            return operation.getExtension("x-".concat(extension));
        }
    }
    // Because our `code-samples` extension is intended for operation-level use, if it's instead placed at the OAS-level
    // we should ignore it.
    if (extension === exports.CODE_SAMPLES) {
        return exports.defaults[extension];
    }
    if (oas.hasExtension('x-readme')) {
        var data = oas.getExtension('x-readme');
        if (data && typeof data === 'object' && extension in data) {
            return data[extension];
        }
    }
    if (oas.hasExtension("x-".concat(extension))) {
        return oas.getExtension("x-".concat(extension));
    }
    return exports.defaults[extension];
}
exports.getExtension = getExtension;
/**
 * With one of our custom OpenAPI extensions, determine if it's valid on a given instance of `oas`.
 *
 * @todo add support for validating on operations.
 *
 * @see {@link https://npm.im/oas}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#specificationExtensions}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#specificationExtensions}
 * @param extension Specification extension to lookup.
 * @param oas An instance of the `oas` library class.
 */
function validateExtension(extension, oas) {
    if (oas.hasExtension('x-readme')) {
        var data = oas.getExtension('x-readme');
        if (typeof data !== 'object' || Array.isArray(data) || data === null) {
            throw new TypeError('"x-readme" must be of type "Object"');
        }
        if (extension in data) {
            if ([exports.CODE_SAMPLES, exports.HEADERS, exports.SAMPLES_LANGUAGES].includes(extension)) {
                if (!Array.isArray(data[extension])) {
                    throw new TypeError("\"x-readme.".concat(extension, "\" must be of type \"Array\""));
                }
            }
            else if (typeof data[extension] !== 'boolean') {
                throw new TypeError("\"x-readme.".concat(extension, "\" must be of type \"Boolean\""));
            }
        }
    }
    // If the extension isn't grouped under `x-readme`, we need to look for them with `x-` prefixes.
    if (oas.hasExtension("x-".concat(extension))) {
        var data = oas.getExtension("x-".concat(extension));
        if ([exports.CODE_SAMPLES, exports.HEADERS, exports.SAMPLES_LANGUAGES].includes(extension)) {
            if (!Array.isArray(data)) {
                throw new TypeError("\"x-".concat(extension, "\" must be of type \"Array\""));
            }
        }
        else if (typeof data !== 'boolean') {
            throw new TypeError("\"x-".concat(extension, "\" must be of type \"Boolean\""));
        }
    }
}
exports.validateExtension = validateExtension;
