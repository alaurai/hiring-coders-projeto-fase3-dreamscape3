"use strict";

var _helpers = require("../../helpers");

describe('makeTree', function () {
  it('works on empty array', function () {
    expect((0, _helpers.makeTree)([])).toMatchInlineSnapshot("\n      Object {\n        \"children\": Object {},\n      }\n    ");
  });
  it('works on root dataPath', function () {
    expect((0, _helpers.makeTree)([{
      dataPath: ''
    }])).toMatchInlineSnapshot("\n      Object {\n        \"children\": Object {\n          \"\": Object {\n            \"children\": Object {},\n            \"errors\": Array [\n              Object {\n                \"dataPath\": \"\",\n              },\n            ],\n          },\n        },\n      }\n    ");
  });
  it('works on nested dataPath', function () {
    expect((0, _helpers.makeTree)([{
      dataPath: '/root/child'
    }])).toMatchInlineSnapshot("\n      Object {\n        \"children\": Object {\n          \"/root\": Object {\n            \"children\": Object {\n              \"/child\": Object {\n                \"children\": Object {},\n                \"errors\": Array [\n                  Object {\n                    \"dataPath\": \"/root/child\",\n                  },\n                ],\n              },\n            },\n            \"errors\": Array [],\n          },\n        },\n      }\n    ");
  });
  it('works on array dataPath', function () {
    expect((0, _helpers.makeTree)([{
      dataPath: '/root/child/0'
    }, {
      dataPath: '/root/child/1'
    }])).toMatchInlineSnapshot("\n      Object {\n        \"children\": Object {\n          \"/root\": Object {\n            \"children\": Object {\n              \"/child/0\": Object {\n                \"children\": Object {},\n                \"errors\": Array [\n                  Object {\n                    \"dataPath\": \"/root/child/0\",\n                  },\n                ],\n              },\n              \"/child/1\": Object {\n                \"children\": Object {},\n                \"errors\": Array [\n                  Object {\n                    \"dataPath\": \"/root/child/1\",\n                  },\n                ],\n              },\n            },\n            \"errors\": Array [],\n          },\n        },\n      }\n    ");
  });
  it('works on array item dataPath', function () {
    expect((0, _helpers.makeTree)([{
      dataPath: '/root/child/0/grand-child'
    }, {
      dataPath: '/root/child/1/grand-child'
    }])).toMatchInlineSnapshot("\n      Object {\n        \"children\": Object {\n          \"/root\": Object {\n            \"children\": Object {\n              \"/child/0\": Object {\n                \"children\": Object {\n                  \"/grand-child\": Object {\n                    \"children\": Object {},\n                    \"errors\": Array [\n                      Object {\n                        \"dataPath\": \"/root/child/0/grand-child\",\n                      },\n                    ],\n                  },\n                },\n                \"errors\": Array [],\n              },\n              \"/child/1\": Object {\n                \"children\": Object {\n                  \"/grand-child\": Object {\n                    \"children\": Object {},\n                    \"errors\": Array [\n                      Object {\n                        \"dataPath\": \"/root/child/1/grand-child\",\n                      },\n                    ],\n                  },\n                },\n                \"errors\": Array [],\n              },\n            },\n            \"errors\": Array [],\n          },\n        },\n      }\n    ");
  });
});